#backup file as of 10/14/16
upstream django {
  server unix:///opt/oafe/cuckoo/uwsgi/cuckoo-webui.sock;
}

upstream api {
  server unix:///opt/oafe/cuckoo/uwsgi/cuckoo-api.sock;
}

#webmin web interface
#location /etc/webmin/ {
    # Tell nginx that we want to proxy everything here to the local webmin server
    # Last slash is important
#    proxy_pass http://127.0.0.1:32505/;
    # Change the response Location: header to come from our proxy directory, not the server
    # Fixes initial redirect after login
#    proxy_redirect http://$host:32505/ /etc/webmin/;
    # Also fixes initial redirect after login
#    proxy_set_header        Host            $host;
#}

#IVRE web interface
server {
	listen *:32500;

	root /usr/local/share/ivre/web/static/;
	index index.html index.htm index.php;

	server_name localhost;

	location / {
		#First attempt to serve request as file, then
		# as directory, then fall back to displaying 404.
		try_files $uri $uri/ =404;
	}

	location ~ ^/cgi-bin/(scanjson|scanupload|flowjson|jsconfig)\.py$ {
		root /usr/local/share/ivre/web/;
		fastcgi_pass unix:/var/run/fcgiwrap.socket;
		fastcgi_param REMOTE_USER $remote_user;
		include fastcgi.conf;
	}
}

# Cukoo Django web interface
#server {
#  listen *:8501;
#  server_name _;
#  charset utf-8;
#
# client_max_body_size 200M;
#
#  location /static {
#    alias /opt/oafe/cuckoo/web/static;
#  }
#
#  location / {
#    uwsgi_pass django;
#    uwsgi_read_timeout 300;
#    include /etc/nginx/uwsgi_params;
#  }
#}

# Cuckoo REST API service
#server {
#  listen *:8504;
#  server_name _;
#  charset utf-8;
#
#  location / {
#    uwsgi_pass api;
#    uwsgi_read_timeout 180;
#    include /etc/nginx/uwsgi_params;
#  }
#}

server {
listen      80;
server_name oafe.local;   ## Replace with your domain name
return 301 https://$server_name$request_uri;
}

server {
listen                *:8501 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/cuckooweb.access.log;
error_log  /var/log/nginx/cuckooweb.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:8511; ## Replace with your Cuckoo Web Interface instance
}
}
server {
listen                *:8502 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/kibana.access.log;
error_log  /var/log/nginx/kibana.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:5601; ## Replace with your kibana instance
}
}
server {
listen                *:8503 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/viperapi.access.log;
error_log  /var/log/nginx/viperapi.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:8513; ## Replace with your Viper API instance
}
}
server {
listen                *:8504 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/cuckooapi.access.log;
error_log  /var/log/nginx/cuckooapi.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:8510; ## Replace with your Cuckoo API instance
}
}
server {
listen                *:8505 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/viperweb.access.log;
error_log  /var/log/nginx/viperweb.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:8514; ## Replace with your Viper Web Interface instance
}
}
server {
listen                *:8506 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/maltrail.access.log;
error_log  /var/log/nginx/maltrail.error.log;

location / {
proxy_pass http://127.0.0.1:8338; ## Replace with your Maltrail instance
}
}
server {
listen                *:8507 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/kibi.access.log;
error_log  /var/log/nginx/kibi.error.log;

location / {
auth_basic "Restricted";
auth_basic_user_file /etc/nginx/conf.d/oafe.htpasswd;
proxy_pass http://127.0.0.1:5606; ## Replace with your Kibi instance
}
}
server {
listen                *:8509 ;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;  ## Replace with your own certificate
ssl_certificate_key /etc/nginx/ssl/nginx.key;  ## Replace with your own key
server_name           oafe.local; ## Replace with your domain name
access_log            /var/log/nginx/ntopng.access.log;
error_log  /var/log/nginx/ntopng.error.log;

location / {
proxy_pass http://127.0.0.1:3000; ## Replace with your NTOPng instance
}
}
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
#server {
#	listen 80 default_server;
#	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

#	root /var/www/html;

	# Add index.php to the list if you are using PHP
#	index index.html index.htm index.nginx-debian.html;

#	server_name _;

#	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
#		try_files $uri $uri/ =404;
#	}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
#}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
